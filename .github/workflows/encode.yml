name: Encode and Generate Permalink

on:
  workflow_dispatch:
    inputs:
      RAW_URL:
        description: 'raw.githubusercontent.com 的原始文件 URL'
        required: true
        default: 'https://raw.githubusercontent.com/hafrey1/LunaTV-config/refs/heads/main/luna-tv-config.json转换成Base58'
      ENCODING:
        description: '编码方式: url 或 base64'
        required: false
        default: 'url'
      OUTPUT_PATH:
        description: '编码后写入的文件路径'
        required: false
        default: 'dist/encoded.txt'
      UPDATE_README:
        description: '是否将固定链接写入 README (true/false)'
        required: false
        default: 'true'
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  encode:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install deps
        run: |
          mkdir -p scripts dist
          npm init -y
          npm pkg set type="module"
          npm install node-fetch@3

      - name: Ensure script exists
        run: |
          if [ ! -f scripts/fetch-and-encode.mjs ]; then
            cat > scripts/fetch-and-encode.mjs <<'EOF'
import fs from 'node:fs/promises'
import path from 'node:path'
import fetch from 'node-fetch'

function encodeUrlSafe(str) {
  return encodeURIComponent(str)
}

function encodeBase64(buf) {
  return Buffer.from(buf).toString('base64')
}

async function main() {
  const rawUrl = process.env.RAW_URL
  const encoding = (process.env.ENCODING || 'url').toLowerCase()
  const outputPath = process.env.OUTPUT_PATH || 'dist/encoded.txt'
  const repo = process.env.GITHUB_REPOSITORY
  const sha = process.env.GITHUB_SHA
  const serverUrl = process.env.GITHUB_SERVER_URL || 'https://github.com'

  if (!rawUrl || !/^https:\/\/raw\.githubusercontent\.com\//.test(rawUrl)) {
    throw new Error('RAW_URL 不能为空，且必须以 https://raw.githubusercontent.com/ 开头')
  }

  const res = await fetch(rawUrl)
  if (!res.ok) {
    throw new Error('抓取失败：' + res.status + ' ' + res.statusText)
  }
  const arrayBuf = await res.arrayBuffer()
  const buf = Buffer.from(arrayBuf)

  let encoded
  if (encoding === 'base64') {
    encoded = encodeBase64(buf)
  } else if (encoding === 'url') {
    const text = buf.toString('utf8')
    encoded = encodeUrlSafe(text)
  } else {
    throw new Error('不支持的编码方式：' + encoding + '（支持 url 或 base64）')
  }

  await fs.mkdir(path.dirname(outputPath), { recursive: true })
  await fs.writeFile(outputPath, encoded, 'utf8')

  const permalink = `${serverUrl}/${repo}/blob/${sha}/${outputPath}`

  const outputs = [
    `encoded_path=${outputPath}`,
    `permalink=${permalink}`,
  ].join('\n')
  await fs.appendFile(process.env.GITHUB_OUTPUT, outputs + '\n')
}

main().catch(err => {
  console.error(err)
  process.exit(1)
})
EOF
          fi

      - name: Run encoder
        id: run_encoder
        env:
          RAW_URL: $ inputs.RAW_URL 
          ENCODING: $ inputs.ENCODING 
          OUTPUT_PATH: $ inputs.OUTPUT_PATH 
        run: |
          node scripts/fetch-and-encode.mjs

      - name: Commit encoded file
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "chore: encode raw file and add output"
            git push
          else
            echo "No changes to commit."
          fi

      - name: Update README with permalink
        if: $ inputs.UPDATE_README == 'true' 
        env:
          PERMALINK: $ steps.run_encoder.outputs.permalink 
          RAW_URL: $ inputs.RAW_URL 
          ENCODING: $ inputs.ENCODING 
          OUTPUT_PATH: $ inputs.OUTPUT_PATH 
        run: |
          START="<!-- ENCODED_PERMALINK_START -->"
          END="<!-- ENCODED_PERMALINK_END -->"
          BLOCK="$START
- 原始 URL: $RAW_URL
- 编码方式: \`$ENCODING\`
- 输出文件: \`$OUTPUT_PATH\`
- 固定链接: $PERMALINK
$END"

          if [ -f README.md ]; then
            if grep -q "$START" README.md; then
              awk -v start="$START" -v end="$END" -v repl="$BLOCK" '
                BEGIN{inblock=0}
                {
                  if ($0 ~ start) { print repl; inblock=1; next }
                  if ($0 ~ end) { inblock=0; next }
                  if (!inblock) print
                }' README.md > README.tmp && mv README.tmp README.md
            else
              printf "\n%s\n" "$BLOCK" >> README.md
            fi
          else
            printf "# Encoded Output\n\n%s\n" "$BLOCK" > README.md
          fi

          if [ -n "$(git status --porcelain)" ]; then
            git add README.md
            git commit -m "docs: update permalink in README"
            git push
          fi

      - name: Show permalink
        run: |
          echo "Permalink: $ steps.run_encoder.outputs.permalink "
